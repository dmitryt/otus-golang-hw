// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calendar.proto

package grpc

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Event struct {
	ID                   int64                `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UserID               int64                `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Title                string               `protobuf:"bytes,3,opt,name=Title,proto3" json:"Title,omitempty"`
	Description          string               `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	StartDate            *timestamp.Timestamp `protobuf:"bytes,5,opt,name=StartDate,proto3" json:"StartDate,omitempty"`
	EndDate              *timestamp.Timestamp `protobuf:"bytes,6,opt,name=EndDate,proto3" json:"EndDate,omitempty"`
	NotifiedAt           *timestamp.Timestamp `protobuf:"bytes,7,opt,name=NotifiedAt,proto3" json:"NotifiedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{0}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}

func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}

func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}

func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}

func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Event) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *Event) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Event) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Event) GetStartDate() *timestamp.Timestamp {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *Event) GetEndDate() *timestamp.Timestamp {
	if m != nil {
		return m.EndDate
	}
	return nil
}

func (m *Event) GetNotifiedAt() *timestamp.Timestamp {
	if m != nil {
		return m.NotifiedAt
	}
	return nil
}

type EventsResponse struct {
	Events               []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventsResponse) Reset()         { *m = EventsResponse{} }
func (m *EventsResponse) String() string { return proto.CompactTextString(m) }
func (*EventsResponse) ProtoMessage()    {}
func (*EventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{1}
}

func (m *EventsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventsResponse.Unmarshal(m, b)
}

func (m *EventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventsResponse.Marshal(b, m, deterministic)
}

func (m *EventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventsResponse.Merge(m, src)
}

func (m *EventsResponse) XXX_Size() int {
	return xxx_messageInfo_EventsResponse.Size(m)
}

func (m *EventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EventsResponse proto.InternalMessageInfo

func (m *EventsResponse) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type UpdateEventRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Event                *Event   `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateEventRequest) Reset()         { *m = UpdateEventRequest{} }
func (m *UpdateEventRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateEventRequest) ProtoMessage()    {}
func (*UpdateEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{2}
}

func (m *UpdateEventRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateEventRequest.Unmarshal(m, b)
}

func (m *UpdateEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateEventRequest.Marshal(b, m, deterministic)
}

func (m *UpdateEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateEventRequest.Merge(m, src)
}

func (m *UpdateEventRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateEventRequest.Size(m)
}

func (m *UpdateEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateEventRequest proto.InternalMessageInfo

func (m *UpdateEventRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateEventRequest) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type DeleteEventRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteEventRequest) Reset()         { *m = DeleteEventRequest{} }
func (m *DeleteEventRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteEventRequest) ProtoMessage()    {}
func (*DeleteEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{3}
}

func (m *DeleteEventRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteEventRequest.Unmarshal(m, b)
}

func (m *DeleteEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteEventRequest.Marshal(b, m, deterministic)
}

func (m *DeleteEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteEventRequest.Merge(m, src)
}

func (m *DeleteEventRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteEventRequest.Size(m)
}

func (m *DeleteEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteEventRequest proto.InternalMessageInfo

func (m *DeleteEventRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*Event)(nil), "Event")
	proto.RegisterType((*EventsResponse)(nil), "EventsResponse")
	proto.RegisterType((*UpdateEventRequest)(nil), "UpdateEventRequest")
	proto.RegisterType((*DeleteEventRequest)(nil), "DeleteEventRequest")
}

func init() { proto.RegisterFile("calendar.proto", fileDescriptor_e3d25d49f056cdb2) }

var fileDescriptor_e3d25d49f056cdb2 = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x41, 0xaf, 0xd2, 0x40,
	0x14, 0x85, 0x69, 0x79, 0xed, 0x93, 0xdb, 0x04, 0x93, 0xfb, 0x0c, 0x69, 0xaa, 0x91, 0xa6, 0x71,
	0xd1, 0x85, 0x19, 0x0c, 0xba, 0x30, 0xc8, 0x46, 0x28, 0x0b, 0x16, 0xba, 0xa8, 0x10, 0x13, 0x77,
	0x85, 0x5e, 0x70, 0x62, 0xe9, 0xd4, 0x76, 0x30, 0xe1, 0x77, 0xf8, 0xbf, 0xfc, 0x4d, 0x86, 0x69,
	0x2b, 0xf5, 0x91, 0x40, 0xc2, 0xaa, 0xb9, 0xe7, 0x9e, 0x33, 0x39, 0xf3, 0x65, 0x0a, 0xdd, 0x75,
	0x94, 0x50, 0x1a, 0x47, 0x39, 0xcb, 0x72, 0x21, 0x85, 0xd3, 0xdf, 0x0a, 0xb1, 0x4d, 0x68, 0xa0,
	0xa6, 0xd5, 0x7e, 0x33, 0x90, 0x7c, 0x47, 0x85, 0x8c, 0x76, 0x59, 0x65, 0x78, 0xfe, 0xd8, 0x40,
	0xbb, 0x4c, 0x1e, 0xca, 0xa5, 0xf7, 0x5b, 0x07, 0x63, 0xf6, 0x8b, 0x52, 0x89, 0x5d, 0xd0, 0xe7,
	0x81, 0xad, 0xb9, 0x9a, 0xdf, 0x0e, 0xf5, 0x79, 0x80, 0x3d, 0x30, 0x97, 0x05, 0xe5, 0xf3, 0xc0,
	0xd6, 0x95, 0x56, 0x4d, 0xf8, 0x0c, 0x8c, 0x05, 0x97, 0x09, 0xd9, 0x6d, 0x57, 0xf3, 0x3b, 0x61,
	0x39, 0xa0, 0x0b, 0x56, 0x40, 0xc5, 0x3a, 0xe7, 0x99, 0xe4, 0x22, 0xb5, 0xef, 0xd4, 0xae, 0x29,
	0xe1, 0x7b, 0xe8, 0x7c, 0x91, 0x51, 0x2e, 0x83, 0x48, 0x92, 0x6d, 0xb8, 0x9a, 0x6f, 0x0d, 0x1d,
	0x56, 0x56, 0x63, 0x75, 0x35, 0xb6, 0xa8, 0xbb, 0x87, 0x27, 0x33, 0xbe, 0x83, 0xfb, 0x59, 0x1a,
	0xab, 0x9c, 0x79, 0x35, 0x57, 0x5b, 0x71, 0x04, 0xf0, 0x59, 0x48, 0xbe, 0xe1, 0x14, 0x7f, 0x94,
	0xf6, 0xfd, 0xd5, 0x60, 0xc3, 0xed, 0xbd, 0x81, 0xae, 0x82, 0x52, 0x84, 0x54, 0x64, 0x22, 0x2d,
	0x08, 0x5f, 0x82, 0x49, 0x4a, 0xb1, 0x35, 0xb7, 0xed, 0x5b, 0x43, 0x93, 0x29, 0x43, 0x58, 0xa9,
	0xde, 0x04, 0x70, 0x99, 0xc5, 0x91, 0xa4, 0x52, 0xa6, 0x9f, 0x7b, 0x2a, 0x14, 0x53, 0x1e, 0xd7,
	0x4c, 0x79, 0x8c, 0x2f, 0xc0, 0x50, 0x7e, 0x85, 0xf4, 0x74, 0x48, 0x29, 0x7a, 0xaf, 0x00, 0x03,
	0x4a, 0xe8, 0xf2, 0x19, 0xc3, 0x3f, 0x3a, 0x3c, 0x99, 0x56, 0x4f, 0x00, 0x47, 0xd0, 0x09, 0xa2,
	0x43, 0xd9, 0x15, 0x2f, 0xdc, 0xce, 0x79, 0xca, 0xfe, 0xbf, 0x90, 0xd7, 0xc2, 0x0f, 0x00, 0x5f,
	0x89, 0x7e, 0xdc, 0x16, 0x1e, 0x83, 0xf5, 0x49, 0xa4, 0xf2, 0xfb, 0x6d, 0xe9, 0x3e, 0x58, 0xd3,
	0x9c, 0x6a, 0x5a, 0x58, 0x71, 0x70, 0xaa, 0xaf, 0xd7, 0xc2, 0xd7, 0x60, 0x35, 0x70, 0xe2, 0x03,
	0x3b, 0x87, 0xdb, 0x70, 0x8f, 0x8f, 0x8f, 0xef, 0x1f, 0x38, 0x7c, 0x60, 0xe7, 0x18, 0x9d, 0xde,
	0x59, 0xc3, 0xd9, 0xf1, 0x37, 0xf0, 0x5a, 0x13, 0xf3, 0xdb, 0xdd, 0x36, 0xcf, 0xd6, 0x2b, 0x53,
	0x6d, 0xde, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xb3, 0x7e, 0xab, 0x12, 0x61, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ context.Context
	_ grpc.ClientConn
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalendarClient is the client API for Calendar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalendarClient interface {
	DayEvents(ctx context.Context, in *timestamp.Timestamp, opts ...grpc.CallOption) (*EventsResponse, error)
	WeekEvents(ctx context.Context, in *timestamp.Timestamp, opts ...grpc.CallOption) (*EventsResponse, error)
	MonthEvents(ctx context.Context, in *timestamp.Timestamp, opts ...grpc.CallOption) (*EventsResponse, error)
	CreateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	UpdateEvent(ctx context.Context, in *UpdateEventRequest, opts ...grpc.CallOption) (*Event, error)
	DeleteEvent(ctx context.Context, in *DeleteEventRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type calendarClient struct {
	cc *grpc.ClientConn
}

func NewCalendarClient(cc *grpc.ClientConn) CalendarClient {
	return &calendarClient{cc}
}

func (c *calendarClient) DayEvents(ctx context.Context, in *timestamp.Timestamp, opts ...grpc.CallOption) (*EventsResponse, error) {
	out := new(EventsResponse)
	err := c.cc.Invoke(ctx, "/Calendar/DayEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) WeekEvents(ctx context.Context, in *timestamp.Timestamp, opts ...grpc.CallOption) (*EventsResponse, error) {
	out := new(EventsResponse)
	err := c.cc.Invoke(ctx, "/Calendar/WeekEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) MonthEvents(ctx context.Context, in *timestamp.Timestamp, opts ...grpc.CallOption) (*EventsResponse, error) {
	out := new(EventsResponse)
	err := c.cc.Invoke(ctx, "/Calendar/MonthEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) CreateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/Calendar/CreateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) UpdateEvent(ctx context.Context, in *UpdateEventRequest, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/Calendar/UpdateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) DeleteEvent(ctx context.Context, in *DeleteEventRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Calendar/DeleteEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalendarServer is the server API for Calendar service.
type CalendarServer interface {
	DayEvents(context.Context, *timestamp.Timestamp) (*EventsResponse, error)
	WeekEvents(context.Context, *timestamp.Timestamp) (*EventsResponse, error)
	MonthEvents(context.Context, *timestamp.Timestamp) (*EventsResponse, error)
	CreateEvent(context.Context, *Event) (*Event, error)
	UpdateEvent(context.Context, *UpdateEventRequest) (*Event, error)
	DeleteEvent(context.Context, *DeleteEventRequest) (*empty.Empty, error)
}

func RegisterCalendarServer(s *grpc.Server, srv CalendarServer) {
	s.RegisterService(&_Calendar_serviceDesc, srv)
}

func _Calendar_DayEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(timestamp.Timestamp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).DayEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Calendar/DayEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).DayEvents(ctx, req.(*timestamp.Timestamp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_WeekEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(timestamp.Timestamp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).WeekEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Calendar/WeekEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).WeekEvents(ctx, req.(*timestamp.Timestamp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_MonthEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(timestamp.Timestamp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).MonthEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Calendar/MonthEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).MonthEvents(ctx, req.(*timestamp.Timestamp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Calendar/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).CreateEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Calendar/UpdateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).UpdateEvent(ctx, req.(*UpdateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Calendar/DeleteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).DeleteEvent(ctx, req.(*DeleteEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Calendar_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Calendar",
	HandlerType: (*CalendarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DayEvents",
			Handler:    _Calendar_DayEvents_Handler,
		},
		{
			MethodName: "WeekEvents",
			Handler:    _Calendar_WeekEvents_Handler,
		},
		{
			MethodName: "MonthEvents",
			Handler:    _Calendar_MonthEvents_Handler,
		},
		{
			MethodName: "CreateEvent",
			Handler:    _Calendar_CreateEvent_Handler,
		},
		{
			MethodName: "UpdateEvent",
			Handler:    _Calendar_UpdateEvent_Handler,
		},
		{
			MethodName: "DeleteEvent",
			Handler:    _Calendar_DeleteEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calendar.proto",
}
